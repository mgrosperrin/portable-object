name: MGR.PortableObject - $(GitVersion.SemVer)$(rev:.r)

variables:
- name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
  value: 1
- name: System.Configuration
  value: Release
- name: GitVersion.SemVer
  value: 1.0.0
- name: Artifact.Packages.Name
  value: packages
- name: Artifact.Documentation.Name
  value: documentation
- name: Artifact.Documentation.FilePath
  value: documentation_site.zip

stages:
- stage: Build
  displayName: 'Build the libraries & documentation'
  jobs:
  - job: BuildLibraries
    displayName: Build the libraries
    pool:
      name: Azure Pipelines
      vmImage: windows-2019
    steps:
    - task: gittools.gitversion.gitversion-task.GitVersion@4
      displayName: 'Get version from Git'
      inputs:
        preferBundledVersion: false
      condition: |
        and(
          succeeded(),
          ne(variables['Build.Reason'], 'PullRequest'),
          or(
            eq(variables['Build.SourceBranch'], 'refs/heads/master'),
            eq(variables['Build.SourceBranch'], 'refs/heads/dev'),
            startsWith(variables['Build.SourceBranch'], 'refs/heads/release-')
          )
        )
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        useGlobalJson: true
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        arguments: '-c $(System.Configuration) -p:Version=$(GitVersion.SemVer)'
    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: test
        projects: 'tests/**Tests/*.csproj'
        arguments: '-c $(System.Configuration) --no-build  /p:CollectCoverage=true /p:CoverletOutput=_BuildReports\Coverage\ /p:CoverletOutputFormat=cobertura /p:Exclude="[xunit.*]*%2c[*]JetBrains.*%2c[*Tests*]*"'
    - task: CopyFiles@2
      displayName: 'Copy Files to artifacts folder'
      inputs:
        SourceFolder: src/
        Contents: '**/MGR.PortableObject*.*nupkg'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/nuget'
        flattenFolders: true
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: $(Artifact.Packages.Name)'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/nuget'
        ArtifactName: $(Artifact.Packages.Name)
      condition: |
        and(
          succeeded(),
          ne(variables['Build.Reason'], 'PullRequest'),
          or(
            eq(variables['Build.SourceBranch'], 'refs/heads/master'),
            eq(variables['Build.SourceBranch'], 'refs/heads/dev'),
            startsWith(variables['Build.SourceBranch'], 'refs/heads/release-')))
  - job: BuildDocumentation
    displayName: Build the documentation
    pool:
      name: Azure Pipelines
      vmImage: windows-2019
    steps:
    - task: PowerShell@2
      displayName: 'Build documentation site'
      inputs:
        filePath: 'build/generate_docs.ps1'
    - task: ArchiveFiles@2
      displayName: 'Create archive of documentation site'
      inputs:
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Artifact.Documentation.FilePath)'
        archiveType: zip
        rootFolderOrFile: 'artifacts/_site'
        includeRootFolder: false
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: documentation site'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Artifact.Documentation.FilePath)'
        ArtifactName: $(Artifact.Documentation.Name)
      condition: |
          and(
            succeeded(),
            ne(variables['Build.Reason'], 'PullRequest'),
            eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- stage: PublishPrerelease
  displayName: Publish the prerelease packages
  dependsOn: BuildLibraries
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/dev')
  jobs:
  - deployment: MyGet
    displayName: Deploy the packages to MyGet
    pool:
      name: Azure Pipelines
      vmImage: windows-2019
    environment: MyGet
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            inputs:
              command: 'push'
              packagesToPush: '$(Pipeline.Workspace)/$(Artifact.Packages.Name)/*.nupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'MyGet - mgrosperrin'

- stage: PublishRelease
  displayName: Publish the release packages
  dependsOn: BuildLibraries
  condition: |
    or(
      eq(variables['Build.SourceBranch'], 'refs/heads/master'),
      startsWith(variables['Build.SourceBranch'], 'refs/heads/release-'))
  jobs:
  - deployment: NuGet
    displayName: Deploy the packages to NuGet.org
    pool:
      name: Azure Pipelines
      vmImage: windows-2019
    environment: NuGet
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            inputs:
              command: 'push'
              packagesToPush: '$(Pipeline.Workspace)/$(Artifact.Packages.Name)/*.snupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'MyGet - mgrosperrin'
  - deployment: Documentation
    displayName: Deploy the documentation to GitHub Pages
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    pool:
      name: Azure Pipelines
      vmImage: windows-2019
    variables:
    - group: GitHub_Access_Token
    - name: GitHub.RepositoryName
      value: mgrosperrin/portable-object
    - name: GitHub.GH-Pages.BranchName
      value: gh-pages
    - name: Path.GitHub.Clone.Temp
      value: $(Pipeline.Workspace)\temp_github_clone_folder
    - name: Path.Documentation.Archive.FullPath
      value: $(Pipeline.Workspace)/$(Artifact.Documentation.Name)/$(Artifact.Documentation.FilePath)
    - name: Path.Documentation.Expansion.FullPath
      value: $(Pipeline.Workspace)\temp_expansion_folder
    environment: Documentation
    strategy:
      runOnce:
        deploy:
          steps:
          - script: 'git clone https://github.com/$(GitHub.RepositoryName).git $(Path.GitHub.Clone.Temp) --branch $(GitHub.GH-Pages.BranchName)'
            displayName: 'Clone GitHub Pages branch'
          - task: ExtractFiles@1
            displayName: 'Extract documentation site'
            inputs:
              archiveFilePatterns: '$(Path.Documentation.Archive.FullPath)'
              destinationFolder: '$(Path.Documentation.Expansion.FullPath)'
          - script: 'git rm -r *'
            workingDirectory: '$(Path.GitHub.Clone.Temp)'
            displayName: 'Remove all files in Git'
          - task: CopyFiles@2
            displayName: 'Copy documentation site to Git'
            inputs:
              SourceFolder: '$(Path.Documentation.Expansion.FullPath)'
              Contents: '**/*.*'
              TargetFolder: '$(Path.GitHub.Clone.Temp)'
          - script: |
             git config --global user.email '$(GITHUB_EMAIL)'
             git config --global user.name '$(GITHUB_USER)'
             git add .
             git commit -m "Generate documentation"
             git push https://%gta%@github.com/$(GitHub.RepositoryName).git

            workingDirectory: '$(Path.GitHub.Clone.Temp)'
            displayName: 'Configure Git, commit & push'
            env:
              gta: $(GITHUB_ACCESS_TOKEN)
