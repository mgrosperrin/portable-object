name: MGR.PortableObject - $(GitVersion.SemVer)$(rev:.r)

variables:
- name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
  value: 1
- name: System.Configuration
  value: Release
- name: GitVersion.SemVer
  value: 1.0.0
- name: ArtifactName
  value: packages

stages:
- stage: BuildLibraries
  displayName: Generate the libraries
  jobs:
  - job: Build
    displayName: Build the libraries
    pool:
      name: Azure Pipelines
      vmImage: windows-2019
    steps:
    - task: gittools.gitversion.gitversion-task.GitVersion@4
      displayName: 'Get version from Git'
      inputs:
        preferBundledVersion: false
      condition: |
        and(
          succeeded(),
          ne(variables['Build.Reason'], 'PullRequest'),
          or(
            eq(variables['Build.SourceBranch'], 'refs/heads/master'),
            eq(variables['Build.SourceBranch'], 'refs/heads/dev'),
            startsWith(variables['Build.SourceBranch'], 'refs/heads/release-')
          )
        )

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        useGlobalJson: true

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        arguments: '-c $(System.Configuration) -p:Version=$(GitVersion.SemVer)'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: test
        projects: 'tests/**Tests/*.csproj'
        arguments: '-c $(System.Configuration) --no-build  /p:CollectCoverage=true /p:CoverletOutput=_BuildReports\Coverage\ /p:CoverletOutputFormat=cobertura /p:Exclude="[xunit.*]*%2c[*]JetBrains.*%2c[*Tests*]*"'

    - task: CopyFiles@2
      displayName: 'Copy Files to artifacts folder'
      inputs:
        SourceFolder: src/
        Contents: '**/MGR.PortableObject.*.*nupkg'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/nuget'
        flattenFolders: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: $(ArtifactName)'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/nuget'
        ArtifactName: $(ArtifactName)
      condition: |
        and(
          succeeded(),
          ne(variables['Build.Reason'], 'PullRequest'),
          or(
            eq(variables['Build.SourceBranch'], 'refs/heads/master'),
            eq(variables['Build.SourceBranch'], 'refs/heads/dev'),
            startsWith(variables['Build.SourceBranch'], 'refs/heads/release-')))

- stage: PublishPrerelease
  displayName: Publish the prerelease packages
  dependsOn: BuildLibraries
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/dev')
  jobs:
  - deployment: MyGet
    displayName: Deploy the packages to MyGet
    pool:
      name: Azure Pipelines
      vmImage: windows-2019
    environment: MyGet
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            inputs:
              command: 'push'
              packagesToPush: '$(Pipeline.Workspace)/$(ArtifactName)/*.nupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'MyGet - mgrosperrin'

- stage: PublishRelease
  displayName: Publish the release packages
  dependsOn: BuildLibraries
  condition: |
    or(
      eq(variables['Build.SourceBranch'], 'refs/heads/master'),
      startsWith(variables['Build.SourceBranch'], 'refs/heads/release-'))
  jobs:
  - deployment: NuGet
    displayName: Deploy the packages to NuGet.org
    pool:
      name: Azure Pipelines
      vmImage: windows-2019
    environment: NuGet
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            inputs:
              command: 'push'
              packagesToPush: '$(Pipeline.Workspace)/$(ArtifactName)/*.nupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'MyGet - mgrosperrin'
